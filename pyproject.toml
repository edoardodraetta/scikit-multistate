[tool.poetry]
name = "scikit-multistate"
version = "0.1"
description = "Multistate modeling in Python - A scikit-learn compatible library"
authors = ["Edoardo Draetta"]
license = "MIT"
readme = "README.md"
repository = "https://edoardodraetta.com/hrossman/scikit-multistate"
keywords = ["multstate", "competing risks", "survival",  "scikit-learn"]
packages = [{include = "skms", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
numpy = "^1.24.0"
pandas = "^2.0.0"
lifelines = "^0.27.0"
matplotlib = "^3.7.0"
joblib = "^1.3.0"
tqdm = "^4.65.0"
scikit-learn = "^1.3.0"
tabulate = "^0.9.0"
ipykernel = "^6.29.5"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
ruff = ">=0.5.3"
coverage = {extras = ["toml"], version = "^7.3.0"}
pytest-cov = "^4.1.0"
mkdocs-material = "^9.4.0"
mknotebooks = "^0.8.0"
pre-commit = "^3.5.0"
mkdocstrings = "^0.24.0"
scikit-survival = "^0.22.0"
ipykernel = "^6.25.0"
jupyter = "^1.1.1"
mypy = "^1.8.0"
types-tabulate = "^0.9.0"

[tool.ruff]
target-version = "py310"
line-length = 140
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # pydocstyle
    # Type checking rules - corrected based on available codes
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
    "ANN205",  # Missing return type annotation for staticmethod
    "ANN206",  # Missing return type annotation for classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "FA100",   # Missing `from __future__ import annotations`
    "UP006",   # Use `list` instead of `List` for type annotations (Python 3.9+)
    "UP007",   # Use `X | Y` for Union types (Python 3.10+)
]
ignore = [
    "UP035",   # Import from typing is deprecated, use collections.abc
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
    "N803",
]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["I001", "F403", "D104"]  # Ignore unused imports missing docstrings
# Test files don't need full type annotations
"tests/**/*.py" = ["ANN001", "ANN201", "ANN202"]
# Example/demo files can be more relaxed
"examples/**/*.py" = ["ANN001", "ANN201", "ANN202"]
# Allow missing annotations in __init__.py files
"**/__init__.py" = ["ANN001", "ANN201"]
# Jupyter notebooks - much more relaxed rules for exploratory/demo code
"*.ipynb" = [
    # Type annotation rules - notebooks are for exploration, not production
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN206", "ANN401",
    # Documentation rules - cells often contain experimental code
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    # Import and unused variable rules - common in notebooks for experimentation
    "F401",    # Imported but unused (common when importing for interactive use)
    "F841",    # Local variable assigned but never used (common in exploration)
    # Future annotations not needed in notebooks
    "FA100",
    # Line length can be more flexible in notebooks for readability
    "E501",    # Line too long
    # Naming conventions can be relaxed for quick variables
    "N803", "N806", "N816",  # Lowercase/mixedCase variable names
    # Print statements are normal in notebooks
    "T201",    # print() found
]
# Also apply to notebook directories if you organize them separately
"notebooks/**/*.py" = [
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN206", "ANN401",
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "F401", "F841", "FA100", "E501", "N803", "N806", "N816", "T201"
]
"docs/notebooks/**/*.py" = [
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN206", "ANN401",
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",
    "F401", "F841", "FA100", "E501", "N803", "N806", "N816", "T201"
]

[tool.ruff.isort]
known-first-party = ["skms"] 

# MyPy configuration for comprehensive static type checking
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false  # More relaxed for test files

[[tool.mypy.overrides]]
module = [
    "lifelines.*",
    "sklearn.*", 
    "joblib.*",
    "tqdm.*"
]
ignore_missing_imports = true  # Third-party libraries without type stubs